- hosts: localhost
  become: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    app_env: "{{ lookup('aws_ssm', '{{ ssm_path }}laravel_env', bypath=true, shortnames=true, decrypt=true, recursive=true, region='eu-west-2') }}"
    app_directory: "{{ lookup('aws_ssm', '{{ ssm_path }}app_directory', region='eu-west-2') }}"
    app_user: "{{ lookup('aws_ssm', '{{ ssm_path }}user', region='eu-west-2') }}"
    app_group: "{{ lookup('aws_ssm', '{{ ssm_path }}group', region='eu-west-2') }}"
    efs_dns: "{{ lookup('aws_ssm', '{{ ssm_path }}efs', region='eu-west-2') }}"
    ami_id: "{{ lookup('aws_ssm', '{{ ssm_path }}asg_ami_id', region='eu-west-2') }}"

  tasks:
    - name: Build env file
      no_log: False
      lineinfile:
        path: "{{ app_directory }}/.env"
        regex: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        - "{{  app_env|dict2items|rejectattr(\"key\", \"equalto\", \"key.pem\")|rejectattr(\"key\", \"equalto\", \"cert.pem\")|list|items2dict }}"

    - name: Disable laravel error logging
      lineinfile:
        path: "{{app_directory}}/.env"
        regex: "^APP_DEBUG="
        line: "APP_DEBUG=false"
      when: app_env == "production"

    - name: Limit amazon-cloudwatch-agent CPU
      no_log: True
      lineinfile:
          path: /etc/systemd/system/amazon-cloudwatch-agent.service
          regexp: '^RestartSec=60s'
          line: 'RestartSec=60s\nCPUQuota=30%'
          backrefs: yes

    - name: Restart Amazon CloudWatch Agent
      no_log: True
      service:
        name: amazon-cloudwatch-agent
        state: restarted

    - name: start supervisor
      no_log: True
      systemd:
        state: started
        name: supervisor
        enabled: yes

    - name: Chown all files/directories to app user/group
      ansible.builtin.file:
        path: "{{ app_directory }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        recurse: "yes"

    - name: Mount EFS and Add to FSTAB
      mount:
        src: "{{ efs_dns }}:/"
        path: "{{ app_directory }}/storage"
        state: mounted
        fstype: nfs
      register: result
      until: result is not failed
      retries: 5
      delay: 5

    - name: Get EC2 AMI
      shell: 'curl http://169.254.169.254/latest/meta-data/ami-id'
      register: ami_ec2

    - name: Run Craft migrations
      shell: 'php craft migrate/all'
      args:
        chdir: "{{ app_directory }}"
      when: ami_ec2.stdout != ami_id
    
    - name: Apply project config
      shell: 'php craft project-config/apply'
      args:
        chdir: "{{ app_directory }}"
      when: ami_ec2.stdout != ami_id
